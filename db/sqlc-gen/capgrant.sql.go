// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: capgrant.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgconn"
	"github.com/jackc/pgx/v5/pgtype"
)

const appExists = `-- name: AppExists :one
SELECT count(*)
FROM capgrant
WHERE $1::text []
`

func (q *Queries) AppExists(ctx context.Context, app []string) (int64, error) {
	row := q.db.QueryRow(ctx, appExists, app)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const capExists = `-- name: CapExists :one
SELECT count(*)
FROM capgrant
WHERE $1::text []
`

func (q *Queries) CapExists(ctx context.Context, cap []string) (int64, error) {
	row := q.db.QueryRow(ctx, capExists, cap)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const capGet = `-- name: CapGet :many
SELECT app,cap,setby,setat,"from","to" from capgrant WHERE realm = $1 and "user" = $2
`

type CapGetParams struct {
	Realm  string `json:"realm"`
	Userid string `json:"userid"`
}

type CapGetRow struct {
	App   pgtype.Text      `json:"app"`
	Cap   string           `json:"cap"`
	Setby string           `json:"setby"`
	Setat pgtype.Timestamp `json:"setat"`
	From  pgtype.Timestamp `json:"from"`
	To    pgtype.Timestamp `json:"to"`
}

func (q *Queries) CapGet(ctx context.Context, arg CapGetParams) ([]CapGetRow, error) {
	rows, err := q.db.Query(ctx, capGet, arg.Realm, arg.Userid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CapGetRow
	for rows.Next() {
		var i CapGetRow
		if err := rows.Scan(
			&i.App,
			&i.Cap,
			&i.Setby,
			&i.Setat,
			&i.From,
			&i.To,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const capList = `-- name: CapList :many
SELECT "user",app,cap,"from","to",setat,setby from capgrant
WHERE realm = $1
and (($2::text[] is null) OR ( app = any($2::text[])))
and (($3::text[] is null) OR ( cap = any($3::text[])))
`

type CapListParams struct {
	Realm string   `json:"realm"`
	App   []string `json:"app"`
	Cap   []string `json:"cap"`
}

type CapListRow struct {
	User  string           `json:"user"`
	App   pgtype.Text      `json:"app"`
	Cap   string           `json:"cap"`
	From  pgtype.Timestamp `json:"from"`
	To    pgtype.Timestamp `json:"to"`
	Setat pgtype.Timestamp `json:"setat"`
	Setby string           `json:"setby"`
}

func (q *Queries) CapList(ctx context.Context, arg CapListParams) ([]CapListRow, error) {
	rows, err := q.db.Query(ctx, capList, arg.Realm, arg.App, arg.Cap)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CapListRow
	for rows.Next() {
		var i CapListRow
		if err := rows.Scan(
			&i.User,
			&i.App,
			&i.Cap,
			&i.From,
			&i.To,
			&i.Setat,
			&i.Setby,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const capRevoke = `-- name: CapRevoke :execresult
DELETE FROM capgrant 
WHERE (($2::text [] is null) OR (capgrant.cap = any ($2::text [])))
AND (($3::text [] is null) OR (capgrant.app = any ($3::text [])))
AND capgrant.user = $1
`

type CapRevokeParams struct {
	User string   `json:"user"`
	Cap  []string `json:"cap"`
	App  []string `json:"app"`
}

func (q *Queries) CapRevoke(ctx context.Context, arg CapRevokeParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, capRevoke, arg.User, arg.Cap, arg.App)
}

const countOfRootCapUser = `-- name: CountOfRootCapUser :one
SELECT count(1)
FROM capgrant
WHERE cap = 'root'
`

func (q *Queries) CountOfRootCapUser(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countOfRootCapUser)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteCapGranForApp = `-- name: DeleteCapGranForApp :exec

DELETE FROM capgrant WHERE app = $1 AND realm = $2 AND "user" = $3
`

type DeleteCapGranForAppParams struct {
	App    pgtype.Text `json:"app"`
	Realm  string      `json:"realm"`
	Userid string      `json:"userid"`
}

func (q *Queries) DeleteCapGranForApp(ctx context.Context, arg DeleteCapGranForAppParams) error {
	_, err := q.db.Exec(ctx, deleteCapGranForApp, arg.App, arg.Realm, arg.Userid)
	return err
}

const getCapGrantForApp = `-- name: GetCapGrantForApp :many

SELECT id, realm, "user", app, cap, "from", "to", setat, setby FROM capgrant WHERE app = $1 AND realm = $2 AND "user" = $3
`

type GetCapGrantForAppParams struct {
	App    pgtype.Text `json:"app"`
	Realm  string      `json:"realm"`
	Userid string      `json:"userid"`
}

func (q *Queries) GetCapGrantForApp(ctx context.Context, arg GetCapGrantForAppParams) ([]Capgrant, error) {
	rows, err := q.db.Query(ctx, getCapGrantForApp, arg.App, arg.Realm, arg.Userid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Capgrant
	for rows.Next() {
		var i Capgrant
		if err := rows.Scan(
			&i.ID,
			&i.Realm,
			&i.User,
			&i.App,
			&i.Cap,
			&i.From,
			&i.To,
			&i.Setat,
			&i.Setby,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCapGrantForUser = `-- name: GetCapGrantForUser :many
DELETE FROM capgrant  WHERE "user" = $1 AND realm = $2 RETURNING id, realm, "user", app, cap, "from", "to", setat, setby
`

type GetCapGrantForUserParams struct {
	Userid string `json:"userid"`
	Realm  string `json:"realm"`
}

func (q *Queries) GetCapGrantForUser(ctx context.Context, arg GetCapGrantForUserParams) ([]Capgrant, error) {
	rows, err := q.db.Query(ctx, getCapGrantForUser, arg.Userid, arg.Realm)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Capgrant
	for rows.Next() {
		var i Capgrant
		if err := rows.Scan(
			&i.ID,
			&i.Realm,
			&i.User,
			&i.App,
			&i.Cap,
			&i.From,
			&i.To,
			&i.Setat,
			&i.Setby,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRuleSetCapabilityForApp = `-- name: GetRuleSetCapabilityForApp :one
SELECT count(*) FROM capgrant WHERE "user" = $1 and realm = $2 and app = $3 AND cap = $4
`

type GetRuleSetCapabilityForAppParams struct {
	Userid string      `json:"userid"`
	Realm  string      `json:"realm"`
	App    pgtype.Text `json:"app"`
	Cap    string      `json:"cap"`
}

func (q *Queries) GetRuleSetCapabilityForApp(ctx context.Context, arg GetRuleSetCapabilityForAppParams) (int64, error) {
	row := q.db.QueryRow(ctx, getRuleSetCapabilityForApp,
		arg.Userid,
		arg.Realm,
		arg.App,
		arg.Cap,
	)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getUserCapsAndAppsByRealm = `-- name: GetUserCapsAndAppsByRealm :many
SELECT  cap ,app FROM capgrant  WHERE "user" = $1 and realm = $2 and app= any($3::text[])
`

type GetUserCapsAndAppsByRealmParams struct {
	Userid string   `json:"userid"`
	Realm  string   `json:"realm"`
	App    []string `json:"app"`
}

type GetUserCapsAndAppsByRealmRow struct {
	Cap string      `json:"cap"`
	App pgtype.Text `json:"app"`
}

func (q *Queries) GetUserCapsAndAppsByRealm(ctx context.Context, arg GetUserCapsAndAppsByRealmParams) ([]GetUserCapsAndAppsByRealmRow, error) {
	rows, err := q.db.Query(ctx, getUserCapsAndAppsByRealm, arg.Userid, arg.Realm, arg.App)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserCapsAndAppsByRealmRow
	for rows.Next() {
		var i GetUserCapsAndAppsByRealmRow
		if err := rows.Scan(&i.Cap, &i.App); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserCapsByRealm = `-- name: GetUserCapsByRealm :many
SELECT  cap  FROM capgrant  WHERE "user" = $1 and realm = $2
`

type GetUserCapsByRealmParams struct {
	Userid string `json:"userid"`
	Realm  string `json:"realm"`
}

func (q *Queries) GetUserCapsByRealm(ctx context.Context, arg GetUserCapsByRealmParams) ([]string, error) {
	rows, err := q.db.Query(ctx, getUserCapsByRealm, arg.Userid, arg.Realm)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var cap string
		if err := rows.Scan(&cap); err != nil {
			return nil, err
		}
		items = append(items, cap)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserRealm = `-- name: GetUserRealm :many
SELECT  realm  FROM capgrant  WHERE "user" = $1
`

func (q *Queries) GetUserRealm(ctx context.Context, userid string) ([]string, error) {
	rows, err := q.db.Query(ctx, getUserRealm, userid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var realm string
		if err := rows.Scan(&realm); err != nil {
			return nil, err
		}
		items = append(items, realm)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const grantAppCapability = `-- name: GrantAppCapability :exec
INSERT INTO capgrant (realm, "user", app, cap, "from", "to", setat, setby)
VALUES ($1, $2, $3, $4, $5, $6, NOW() AT TIME ZONE 'UTC', $7)
`

type GrantAppCapabilityParams struct {
	Realm  string           `json:"realm"`
	Userid string           `json:"userid"`
	App    pgtype.Text      `json:"app"`
	Cap    string           `json:"cap"`
	From   pgtype.Timestamp `json:"from"`
	To     pgtype.Timestamp `json:"to"`
	Setby  string           `json:"setby"`
}

func (q *Queries) GrantAppCapability(ctx context.Context, arg GrantAppCapabilityParams) error {
	_, err := q.db.Exec(ctx, grantAppCapability,
		arg.Realm,
		arg.Userid,
		arg.App,
		arg.Cap,
		arg.From,
		arg.To,
		arg.Setby,
	)
	return err
}

const grantRealmCapability = `-- name: GrantRealmCapability :exec
INSERT INTO capgrant (realm,"user",cap,"from","to",setat,setby)
VALUES($1, $2,unnest($3::text []), $4 ,$5,(NOW() AT TIME ZONE 'UTC'),$6)
`

type GrantRealmCapabilityParams struct {
	Realm  string           `json:"realm"`
	Userid string           `json:"userid"`
	Cap    []string         `json:"cap"`
	From   pgtype.Timestamp `json:"from"`
	To     pgtype.Timestamp `json:"to"`
	Setby  string           `json:"setby"`
}

func (q *Queries) GrantRealmCapability(ctx context.Context, arg GrantRealmCapabilityParams) error {
	_, err := q.db.Exec(ctx, grantRealmCapability,
		arg.Realm,
		arg.Userid,
		arg.Cap,
		arg.From,
		arg.To,
		arg.Setby,
	)
	return err
}

const revokeCapGrantForUser = `-- name: RevokeCapGrantForUser :exec
DELETE FROM capgrant  WHERE "user" = $1 AND realm = $2
`

type RevokeCapGrantForUserParams struct {
	Userid string `json:"userid"`
	Realm  string `json:"realm"`
}

func (q *Queries) RevokeCapGrantForUser(ctx context.Context, arg RevokeCapGrantForUserParams) error {
	_, err := q.db.Exec(ctx, revokeCapGrantForUser, arg.Userid, arg.Realm)
	return err
}

const userActivate = `-- name: UserActivate :one
UPDATE capgrant
SET
    "from" = CASE
        WHEN (
            $1::TIMESTAMP
        ) IS NULL THEN NOW()
        ELSE (
            $1::TIMESTAMP
        )
    END,
    "to" = NULL
WHERE
    "user" = $2
    and realm = $3
RETURNING id, realm, "user", app, cap, "from", "to", setat, setby
`

type UserActivateParams struct {
	Activateat pgtype.Timestamp `json:"activateat"`
	Userid     string           `json:"userid"`
	Realm      string           `json:"realm"`
}

func (q *Queries) UserActivate(ctx context.Context, arg UserActivateParams) (Capgrant, error) {
	row := q.db.QueryRow(ctx, userActivate, arg.Activateat, arg.Userid, arg.Realm)
	var i Capgrant
	err := row.Scan(
		&i.ID,
		&i.Realm,
		&i.User,
		&i.App,
		&i.Cap,
		&i.From,
		&i.To,
		&i.Setat,
		&i.Setby,
	)
	return i, err
}

const userDeactivate = `-- name: UserDeactivate :one
UPDATE capgrant
SET
    "to" = CASE
        WHEN (
            $1::TIMESTAMP
        ) IS NULL THEN NOW()
        ELSE (
            $1::TIMESTAMP
        )
    END,
    "from" = NULL
WHERE
    "user" = $2
    and realm = $3
RETURNING id, realm, "user", app, cap, "from", "to", setat, setby
`

type UserDeactivateParams struct {
	Deactivateat pgtype.Timestamp `json:"deactivateat"`
	Userid       string           `json:"userid"`
	Realm        string           `json:"realm"`
}

func (q *Queries) UserDeactivate(ctx context.Context, arg UserDeactivateParams) (Capgrant, error) {
	row := q.db.QueryRow(ctx, userDeactivate, arg.Deactivateat, arg.Userid, arg.Realm)
	var i Capgrant
	err := row.Scan(
		&i.ID,
		&i.Realm,
		&i.User,
		&i.App,
		&i.Cap,
		&i.From,
		&i.To,
		&i.Setat,
		&i.Setby,
	)
	return i, err
}

const userExists = `-- name: UserExists :one
SELECT count(*)
FROM capgrant
WHERE "user" = $1
`

func (q *Queries) UserExists(ctx context.Context, user string) (int64, error) {
	row := q.db.QueryRow(ctx, userExists, user)
	var count int64
	err := row.Scan(&count)
	return count, err
}
